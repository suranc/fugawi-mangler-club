pipeline:
  name: Create Cluster and Deploy Mangler Club
  identifier: Create_Cluster_and_Deploy_Mangler_Club
  projectIdentifier: Hubot
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.suranc_Account_Level
        repoName: fugawi-mangler-club
        build: <+input>
  stages:
    - stage:
        name: Create Cluster
        identifier: Create_Cluster
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: TerraformDestroy
                  name: Destroy Existing Cluster
                  identifier: Destroy_Existing_Cluster
                  spec:
                    provisionerIdentifier: ibmcloud_cluster
                    configuration:
                      type: Inline
                      spec:
                        configFiles:
                          store:
                            spec:
                              connectorRef: account.suranc_Account_Level
                              repoName: ibmcloud-free-cluster-terraform
                              gitFetchType: Branch
                              branch: master
                              folderPath: .
                            type: Github
                        varFiles:
                          - varFile:
                              spec:
                                content: ibmcloud_api_key = "<+secrets.getValue("ibmCloudKey")>"
                              identifier: ibmcloud_api_key
                              type: Inline
                  timeout: 10m
              - step:
                  type: Wait
                  name: Wait 10 Minutes for Delete to Settle
                  identifier: Wait_10_Minutes_for_Delete_to_Settle
                  spec:
                    duration: 10m
              - step:
                  type: TerraformApply
                  name: Create Cluster
                  identifier: Create_Cluster
                  spec:
                    configuration:
                      type: Inline
                      spec:
                        configFiles:
                          store:
                            type: Github
                            spec:
                              gitFetchType: Branch
                              connectorRef: account.suranc_Account_Level
                              repoName: ibmcloud-free-cluster-terraform
                              branch: master
                              folderPath: .
                        varFiles:
                          - varFile:
                              spec:
                                content: ibmcloud_api_key = "<+secrets.getValue("ibmCloudKey")>"
                              identifier: ibmcloud_create_cluster_api_key
                              type: Inline
                    provisionerIdentifier: ibmcloud_cluster
                  timeout: 10m
              - step:
                  type: Wait
                  name: Wait 15 Minutes for Cluster Creation to Settle
                  identifier: Wait_15_Minutes_for_Cluster_Creation_to_Settle
                  spec:
                    duration: 15m
        tags: {}
        when:
          pipelineStatus: Success
          condition: "false"
    - stage:
        name: Update Cluster
        identifier: Update_Cluster
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Run
                  name: Log in to Cluster and get kubeconfig
                  identifier: Run_1
                  spec:
                    connectorRef: account.harnessImage
                    image: ghcr.io/suranc/ibmcloud-cli
                    shell: Sh
                    command: |-
                      ibmcloud config --check-version=false
                      ibmcloud login --apikey "<+secrets.getValue("ibmCloudKey")>" -r us-south
                      ibmcloud ks cluster config -c harness-cluster --output yaml > /harness-shared/kubeconfig.yaml
              - step:
                  type: Run
                  name: Create nginx Ingress Controller
                  identifier: Create_nginx_Ingress_Controller
                  spec:
                    connectorRef: account.Account_Level_suranc_GitHub_Docker_Registry
                    image: ghcr.io/suranc/ibmcloud-cli
                    shell: Sh
                    command: |-
                      export KUBECONFIG=/harness-shared/kubeconfig.yaml

                      # Install nginx ingress controller
                      kubectl create namespace ingress-nginx --dry-run=client -o yaml | kubectl apply -f -
                      helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                      helm repo update
                      helm -n ingress-nginx upgrade -i ingress-nginx ingress-nginx/ingress-nginx

                      # Block until nginx ingress controller is ready
                      sleep 1
                      kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=120s

                      # Get the IP address and port of the ingress service, and output to the github action
                      INGRESS_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
                      INGRESS_PORT=$(kubectl get -n ingress-nginx service/ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
                    outputVariables:
                      - name: INGRESS_IP
                      - name: INGRESS_PORT
              - step:
                  type: Run
                  name: Apply Static Site Deployments
                  identifier: Apply_Static_Site_Deployments
                  spec:
                    connectorRef: account.Account_Level_suranc_GitHub_Docker_Registry
                    image: ghcr.io/suranc/ibmcloud-cli
                    shell: Sh
                    command: |-
                      export KUBECONFIG=/harness-shared/kubeconfig.yaml
                      kubectl apply -f .
              - step:
                  type: Run
                  name: Apply GitOps Resources to Rehydrate Cluster
                  identifier: Apply_GitOps_Resources_to_Rehydrate_Cluster
                  spec:
                    connectorRef: account.Account_Level_suranc_GitHub_Docker_Registry
                    image: ghcr.io/suranc/ibmcloud-cli
                    shell: Sh
                    command: echo apply gitops configs 1 then 2 then 3
              - step:
                  type: Run
                  name: Get Public IP for node
                  identifier: Get_Public_IP_for_node
                  spec:
                    connectorRef: account.harnessImage
                    image: alpine
                    shell: Sh
                    command: echo test
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.sacluster
              namespace: chris-builds
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          sharedPaths:
            - /harness-shared
        when:
          pipelineStatus: Success
    - stage:
        name: Update haproxy
        identifier: Update_haproxy
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Update haproxy Server to Point to New Cluster
                  identifier: Update_haproxy_Server_to_Point_to_New_Cluster
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: echo stub
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
        tags: {}
